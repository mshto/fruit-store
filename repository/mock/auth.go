// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mshto/fruit-store/repository (interfaces: Auth)

// Package repomock is a generated GoMock package.
package repomock

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/mshto/fruit-store/entity"
	reflect "reflect"
)

// MockAuth is a mock of Auth interface
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// GetUserByName mocks base method
func (m *MockAuth) GetUserByName(arg0 string) (*entity.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", arg0)
	ret0, _ := ret[0].(*entity.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName
func (mr *MockAuthMockRecorder) GetUserByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockAuth)(nil).GetUserByName), arg0)
}

// Signup mocks base method
func (m *MockAuth) Signup(arg0 *entity.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup
func (mr *MockAuthMockRecorder) Signup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockAuth)(nil).Signup), arg0)
}
