// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mshto/fruit-store/repository (interfaces: Cart)

// Package repomock is a generated GoMock package.
package repomock

import (
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entity "github.com/mshto/fruit-store/entity"
	reflect "reflect"
)

// MockCart is a mock of Cart interface
type MockCart struct {
	ctrl     *gomock.Controller
	recorder *MockCartMockRecorder
}

// MockCartMockRecorder is the mock recorder for MockCart
type MockCartMockRecorder struct {
	mock *MockCart
}

// NewMockCart creates a new mock instance
func NewMockCart(ctrl *gomock.Controller) *MockCart {
	mock := &MockCart{ctrl: ctrl}
	mock.recorder = &MockCartMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCart) EXPECT() *MockCartMockRecorder {
	return m.recorder
}

// CreateUserProduct mocks base method
func (m *MockCart) CreateUserProduct(arg0, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserProduct indicates an expected call of CreateUserProduct
func (mr *MockCartMockRecorder) CreateUserProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserProduct", reflect.TypeOf((*MockCart)(nil).CreateUserProduct), arg0, arg1)
}

// CreateUserProducts mocks base method
func (m *MockCart) CreateUserProducts(arg0 uuid.UUID, arg1 entity.UserProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserProducts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserProducts indicates an expected call of CreateUserProducts
func (mr *MockCartMockRecorder) CreateUserProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserProducts", reflect.TypeOf((*MockCart)(nil).CreateUserProducts), arg0, arg1)
}

// GetUserProducts mocks base method
func (m *MockCart) GetUserProducts(arg0 uuid.UUID) ([]entity.GetUserProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProducts", arg0)
	ret0, _ := ret[0].([]entity.GetUserProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProducts indicates an expected call of GetUserProducts
func (mr *MockCartMockRecorder) GetUserProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProducts", reflect.TypeOf((*MockCart)(nil).GetUserProducts), arg0)
}

// RemoveUserProduct mocks base method
func (m *MockCart) RemoveUserProduct(arg0, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserProduct indicates an expected call of RemoveUserProduct
func (mr *MockCartMockRecorder) RemoveUserProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserProduct", reflect.TypeOf((*MockCart)(nil).RemoveUserProduct), arg0, arg1)
}

// RemoveUserProducts mocks base method
func (m *MockCart) RemoveUserProducts(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserProducts", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserProducts indicates an expected call of RemoveUserProducts
func (mr *MockCartMockRecorder) RemoveUserProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserProducts", reflect.TypeOf((*MockCart)(nil).RemoveUserProducts), arg0)
}
