// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mshto/fruit-store/repository (interfaces: Discount)

// Package repomock is a generated GoMock package.
package repomock

import (
	gomock "github.com/golang/mock/gomock"
	config "github.com/mshto/fruit-store/config"
	reflect "reflect"
)

// MockDiscount is a mock of Discount interface
type MockDiscount struct {
	ctrl     *gomock.Controller
	recorder *MockDiscountMockRecorder
}

// MockDiscountMockRecorder is the mock recorder for MockDiscount
type MockDiscountMockRecorder struct {
	mock *MockDiscount
}

// NewMockDiscount creates a new mock instance
func NewMockDiscount(ctrl *gomock.Controller) *MockDiscount {
	mock := &MockDiscount{ctrl: ctrl}
	mock.recorder = &MockDiscountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscount) EXPECT() *MockDiscountMockRecorder {
	return m.recorder
}

// GetDiscount mocks base method
func (m *MockDiscount) GetDiscount(arg0 string) (config.GeneralSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscount", arg0)
	ret0, _ := ret[0].(config.GeneralSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscount indicates an expected call of GetDiscount
func (mr *MockDiscountMockRecorder) GetDiscount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscount", reflect.TypeOf((*MockDiscount)(nil).GetDiscount), arg0)
}

// RemoveDiscount mocks base method
func (m *MockDiscount) RemoveDiscount(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDiscount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDiscount indicates an expected call of RemoveDiscount
func (mr *MockDiscountMockRecorder) RemoveDiscount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDiscount", reflect.TypeOf((*MockDiscount)(nil).RemoveDiscount), arg0)
}
